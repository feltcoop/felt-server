// generated by src/lib/app/eventTypes.gen.ts

import type {Readable} from 'svelte/store';

import type {ClientAccountSession} from '$lib/session/clientSession';
import type {ApiResult} from '$lib/server/api';
import type {Community} from '$lib/vocab/community/community';
import type {Persona} from '$lib/vocab/persona/persona';
import type {Membership} from '$lib/vocab/membership/membership';
import type {Space} from '$lib/vocab/space/space';
import type {File} from '$lib/vocab/file/file';
import type {DispatchContext} from '$lib/ui/api';

export interface EventsParams {
	log_in: LogInParamsType;
	log_out: LogOutParamsType;
	create_community: CreateCommunityParamsType;
	read_community: ReadCommunityParamsType;
	read_communities: ReadCommunitiesParamsType;
	create_persona: CreatePersonaParamsType;
	create_membership: CreateMembershipParamsType;
	create_space: CreateSpaceParamsType;
	read_space: ReadSpaceParamsType;
	read_spaces: ReadSpacesParamsType;
	create_file: CreateFileParamsType;
	read_files: ReadFilesParamsType;
	query_files: QueryFilesParamsType;
	toggle_main_nav: ToggleMainNavParamsType;
	toggle_secondary_nav: ToggleSecondaryNavParamsType;
	set_main_nav_view: SetMainNavViewParamsType;
	set_mobile: SetMobileParamsType;
	select_persona: SelectPersonaParamsType;
	select_community: SelectCommunityParamsType;
	select_space: SelectSpaceParamsType;
}
export interface EventsResponse {
	log_in: LogInResponseType;
	log_out: LogOutResponseType;
	create_community: CreateCommunityResponseType;
	read_community: ReadCommunityResponseType;
	read_communities: ReadCommunitiesResponseType;
	create_persona: CreatePersonaResponseType;
	create_membership: CreateMembershipResponseType;
	create_space: CreateSpaceResponseType;
	read_space: ReadSpaceResponseType;
	read_spaces: ReadSpacesResponseType;
	create_file: CreateFileResponseType;
	read_files: ReadFilesResponseType;
}

export interface LogInParamsType {
	accountName: string;
	password: string;
}

export type LogInResponseType = null;

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type LogInResponseResult = ApiResult<LogInResponseType>;

export type LogOutParamsType = void;
export interface LogOutResponseType {
	message: string;
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type LogOutResponseResult = ApiResult<LogOutResponseType>;

export interface CreateCommunityParamsType {
	name: string;
	persona_id: number;
}

export interface CreateCommunityResponseType {
	community: {
		community_id: number;
		name: string;
		created: Date;
		updated: Date | null;
		[k: string]: unknown;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type CreateCommunityResponseResult = ApiResult<CreateCommunityResponseType>;

export interface ReadCommunityParamsType {
	community_id: number;
}

export interface ReadCommunityResponseType {
	community: {
		community_id: number;
		name: string;
		created: Date;
		updated: Date | null;
		[k: string]: unknown;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type ReadCommunityResponseResult = ApiResult<ReadCommunityResponseType>;

export interface ReadCommunitiesParamsType {}

export interface ReadCommunitiesResponseType {
	communities: {
		community_id: number;
		name: string;
		created: Date;
		updated: Date | null;
		[k: string]: unknown;
	}[];
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type ReadCommunitiesResponseResult = ApiResult<ReadCommunitiesResponseType>;

export interface CreatePersonaParamsType {
	name: string;
}

export interface CreatePersonaResponseType {
	persona: {
		persona_id: number;
		account_id: number;
		name: string;
		icon?: string;
		community_ids: number[];
		created: Date;
		updated: Date | null;
	};
	community: {
		community_id: number;
		name: string;
		created: Date;
		updated: Date | null;
		[k: string]: unknown;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type CreatePersonaResponseResult = ApiResult<CreatePersonaResponseType>;

export interface CreateMembershipParamsType {
	persona_id: number;
	community_id: number;
}

export interface CreateMembershipResponseType {
	membership: {
		persona_id: number;
		community_id: number;
		created: Date;
		updated: Date | null;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type CreateMembershipResponseResult = ApiResult<CreateMembershipResponseType>;

export interface CreateSpaceParamsType {
	community_id: number;
	name: string;
	url: string;
	media_type: string;
	content: string;
}

export interface CreateSpaceResponseType {
	space: {
		space_id: number;
		name: string;
		url: string;
		media_type: string;
		content: string;
		created: Date;
		updated: Date | null;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type CreateSpaceResponseResult = ApiResult<CreateSpaceResponseType>;

export interface ReadSpaceParamsType {
	space_id: number;
}

export interface ReadSpaceResponseType {
	space: {
		space_id: number;
		name: string;
		url: string;
		media_type: string;
		content: string;
		created: Date;
		updated: Date | null;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type ReadSpaceResponseResult = ApiResult<ReadSpaceResponseType>;

export interface ReadSpacesParamsType {
	community_id: number;
}

export interface ReadSpacesResponseType {
	spaces: {
		space_id: number;
		name: string;
		url: string;
		media_type: string;
		content: string;
		created: Date;
		updated: Date | null;
	}[];
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type ReadSpacesResponseResult = ApiResult<ReadSpacesResponseType>;

export interface CreateFileParamsType {
	actor_id: number;
	space_id: number;
	content: string;
}

export interface CreateFileResponseType {
	file: {
		file_id: number;
		actor_id: number;
		space_id: number;
		content: string;
		created: Date;
		updated: Date | null;
	};
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type CreateFileResponseResult = ApiResult<CreateFileResponseType>;

export interface ReadFilesParamsType {
	space_id: number;
}

export interface ReadFilesResponseType {
	files: {
		file_id: number;
		actor_id: number;
		space_id: number;
		content: string;
		created: Date;
		updated: Date | null;
	}[];
}

// TODO hacky, the ApiResult type should be represented in the schema
// but that requires generic type generation:
// https://github.com/bcherny/json-schema-to-typescript/issues/59
export type ReadFilesResponseResult = ApiResult<ReadFilesResponseType>;

export interface QueryFilesParamsType {
	space_id: number;
}

export type ToggleMainNavParamsType = void;

export type ToggleSecondaryNavParamsType = void;

export type SetMainNavViewParamsType = 'explorer' | 'account';

export type SetMobileParamsType = boolean;

export interface SelectPersonaParamsType {
	persona_id: number;
}

export interface SelectCommunityParamsType {
	community_id: number | null;
}

export interface SelectSpaceParamsType {
	community_id: number;
	space_id: number;
}

export interface Dispatch {
	(eventName: 'log_in', params: LogInParamsType): Promise<
		ApiResult<{session: ClientAccountSession}>
	>;
	(eventName: 'log_out', params: LogOutParamsType): Promise<ApiResult<{message: string}>>;
	(eventName: 'create_community', params: CreateCommunityParamsType): Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	(eventName: 'read_community', params: ReadCommunityParamsType): Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	(eventName: 'read_communities', params: ReadCommunitiesParamsType): Promise<
		ApiResult<{
			communities: Community[];
		}>
	>;
	(eventName: 'create_persona', params: CreatePersonaParamsType): Promise<
		ApiResult<{persona: Persona; community: Community}>
	>;
	(eventName: 'create_membership', params: CreateMembershipParamsType): Promise<
		ApiResult<{membership: Membership}>
	>;
	(eventName: 'create_space', params: CreateSpaceParamsType): Promise<ApiResult<{space: Space}>>;
	(eventName: 'read_space', params: ReadSpaceParamsType): Promise<ApiResult<{space: Space}>>;
	(eventName: 'read_spaces', params: ReadSpacesParamsType): Promise<ApiResult<{spaces: Space[]}>>;
	(eventName: 'create_file', params: CreateFileParamsType): Promise<ApiResult<{file: File}>>;
	(eventName: 'read_files', params: ReadFilesParamsType): Promise<ApiResult<{files: File[]}>>;
	(eventName: 'query_files', params: QueryFilesParamsType): Readable<Readable<File>[]>;
	(eventName: 'toggle_main_nav', params: ToggleMainNavParamsType): void;
	(eventName: 'toggle_secondary_nav', params: ToggleSecondaryNavParamsType): void;
	(eventName: 'set_main_nav_view', params: SetMainNavViewParamsType): void;
	(eventName: 'set_mobile', params: SetMobileParamsType): void;
	(eventName: 'select_persona', params: SelectPersonaParamsType): void;
	(eventName: 'select_community', params: SelectCommunityParamsType): void;
	(eventName: 'select_space', params: SelectSpaceParamsType): void;
}

export interface UiHandlers {
	log_in: (
		ctx: DispatchContext<LogInParamsType, ApiResult<{session: ClientAccountSession}>>,
	) => Promise<ApiResult<{session: ClientAccountSession}>>;
	log_out: (
		ctx: DispatchContext<LogOutParamsType, ApiResult<{message: string}>>,
	) => Promise<ApiResult<{message: string}>>;
	create_community: (
		ctx: DispatchContext<
			CreateCommunityParamsType,
			ApiResult<{
				community: Community;
			}>
		>,
	) => Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	read_community: (
		ctx: DispatchContext<
			ReadCommunityParamsType,
			ApiResult<{
				community: Community;
			}>
		>,
	) => Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	read_communities: (
		ctx: DispatchContext<
			ReadCommunitiesParamsType,
			ApiResult<{
				communities: Community[];
			}>
		>,
	) => Promise<
		ApiResult<{
			communities: Community[];
		}>
	>;
	create_persona: (
		ctx: DispatchContext<
			CreatePersonaParamsType,
			ApiResult<{persona: Persona; community: Community}>
		>,
	) => Promise<ApiResult<{persona: Persona; community: Community}>>;
	create_membership: (
		ctx: DispatchContext<CreateMembershipParamsType, ApiResult<{membership: Membership}>>,
	) => Promise<ApiResult<{membership: Membership}>>;
	create_space: (
		ctx: DispatchContext<CreateSpaceParamsType, ApiResult<{space: Space}>>,
	) => Promise<ApiResult<{space: Space}>>;
	read_space: (
		ctx: DispatchContext<ReadSpaceParamsType, ApiResult<{space: Space}>>,
	) => Promise<ApiResult<{space: Space}>>;
	read_spaces: (
		ctx: DispatchContext<ReadSpacesParamsType, ApiResult<{spaces: Space[]}>>,
	) => Promise<ApiResult<{spaces: Space[]}>>;
	create_file: (
		ctx: DispatchContext<CreateFileParamsType, ApiResult<{file: File}>>,
	) => Promise<ApiResult<{file: File}>>;
	read_files: (
		ctx: DispatchContext<ReadFilesParamsType, ApiResult<{files: File[]}>>,
	) => Promise<ApiResult<{files: File[]}>>;
	query_files: (ctx: DispatchContext<QueryFilesParamsType, void>) => Readable<Readable<File>[]>;
	toggle_main_nav: (ctx: DispatchContext<ToggleMainNavParamsType, void>) => void;
	toggle_secondary_nav: (ctx: DispatchContext<ToggleSecondaryNavParamsType, void>) => void;
	set_main_nav_view: (ctx: DispatchContext<SetMainNavViewParamsType, void>) => void;
	set_mobile: (ctx: DispatchContext<SetMobileParamsType, void>) => void;
	select_persona: (ctx: DispatchContext<SelectPersonaParamsType, void>) => void;
	select_community: (ctx: DispatchContext<SelectCommunityParamsType, void>) => void;
	select_space: (ctx: DispatchContext<SelectSpaceParamsType, void>) => void;
}

// generated by src/lib/app/eventTypes.gen.ts
