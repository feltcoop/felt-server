// generated by src/lib/app/mutations.gen.ts

import type {Readable} from 'svelte/store';

import type {ApiResult} from '$lib/server/api';
import type {Entity} from '$lib/vocab/entity/entity';
import type {DispatchContext} from '$lib/app/dispatch';
import type {
	LoginAccountParams,
	LoginAccountResponseResult,
	LogoutAccountParams,
	LogoutAccountResponseResult,
	CreateCommunityParams,
	CreateCommunityResponseResult,
	ReadCommunityParams,
	ReadCommunityResponseResult,
	ReadCommunitiesParams,
	ReadCommunitiesResponseResult,
	UpdateCommunitySettingsParams,
	UpdateCommunitySettingsResponseResult,
	CreateAccountPersonaParams,
	CreateAccountPersonaResponseResult,
	CreateMembershipParams,
	CreateMembershipResponseResult,
	DeleteMembershipParams,
	DeleteMembershipResponseResult,
	CreateSpaceParams,
	CreateSpaceResponseResult,
	ReadSpaceParams,
	ReadSpaceResponseResult,
	ReadSpacesParams,
	ReadSpacesResponseResult,
	UpdateSpaceParams,
	UpdateSpaceResponseResult,
	DeleteSpaceParams,
	DeleteSpaceResponseResult,
	CreateEntityParams,
	CreateEntityResponseResult,
	ReadEntitiesParams,
	ReadEntitiesResponseResult,
	UpdateEntityParams,
	UpdateEntityResponseResult,
	QueryEntitiesParams,
	SoftDeleteEntityParams,
	SoftDeleteEntityResponseResult,
	HardDeleteEntityParams,
	HardDeleteEntityResponseResult,
	PingParams,
	PingResponseResult,
	ToggleMainNavParams,
	ToggleSecondaryNavParams,
	SetMobileParams,
	OpenDialogParams,
	CloseDialogParams,
	SelectPersonaParams,
	SelectCommunityParams,
	SelectSpaceParams,
	ViewSpaceParams,
	CreateTieParams,
	CreateTieResponseResult,
	ReadTiesParams,
	ReadTiesResponseResult,
	DeleteTieParams,
	DeleteTieResponseResult,
} from '$lib/app/eventTypes';

/* eslint-disable @typescript-eslint/array-type */

export interface Mutations {
	LoginAccount: (
		ctx: DispatchContext<LoginAccountParams, LoginAccountResponseResult>,
	) => Promise<LoginAccountResponseResult>;
	LogoutAccount: (
		ctx: DispatchContext<LogoutAccountParams, LogoutAccountResponseResult>,
	) => Promise<LogoutAccountResponseResult>;
	CreateCommunity: (
		ctx: DispatchContext<CreateCommunityParams, CreateCommunityResponseResult>,
	) => Promise<CreateCommunityResponseResult>;
	ReadCommunity: (
		ctx: DispatchContext<ReadCommunityParams, ReadCommunityResponseResult>,
	) => Promise<ReadCommunityResponseResult>;
	ReadCommunities: (
		ctx: DispatchContext<ReadCommunitiesParams, ReadCommunitiesResponseResult>,
	) => Promise<ReadCommunitiesResponseResult>;
	UpdateCommunitySettings: (
		ctx: DispatchContext<UpdateCommunitySettingsParams, UpdateCommunitySettingsResponseResult>,
	) => Promise<UpdateCommunitySettingsResponseResult>;
	CreateAccountPersona: (
		ctx: DispatchContext<CreateAccountPersonaParams, CreateAccountPersonaResponseResult>,
	) => Promise<CreateAccountPersonaResponseResult>;
	CreateMembership: (
		ctx: DispatchContext<CreateMembershipParams, CreateMembershipResponseResult>,
	) => Promise<CreateMembershipResponseResult>;
	DeleteMembership: (
		ctx: DispatchContext<DeleteMembershipParams, DeleteMembershipResponseResult>,
	) => Promise<DeleteMembershipResponseResult>;
	CreateSpace: (
		ctx: DispatchContext<CreateSpaceParams, CreateSpaceResponseResult>,
	) => Promise<CreateSpaceResponseResult>;
	ReadSpace: (
		ctx: DispatchContext<ReadSpaceParams, ReadSpaceResponseResult>,
	) => Promise<ReadSpaceResponseResult>;
	ReadSpaces: (
		ctx: DispatchContext<ReadSpacesParams, ReadSpacesResponseResult>,
	) => Promise<ReadSpacesResponseResult>;
	UpdateSpace: (
		ctx: DispatchContext<UpdateSpaceParams, UpdateSpaceResponseResult>,
	) => Promise<UpdateSpaceResponseResult>;
	DeleteSpace: (
		ctx: DispatchContext<DeleteSpaceParams, DeleteSpaceResponseResult>,
	) => Promise<DeleteSpaceResponseResult>;
	CreateEntity: (
		ctx: DispatchContext<CreateEntityParams, CreateEntityResponseResult>,
	) => Promise<CreateEntityResponseResult>;
	ReadEntities: (
		ctx: DispatchContext<ReadEntitiesParams, ReadEntitiesResponseResult>,
	) => Promise<ReadEntitiesResponseResult>;
	UpdateEntity: (
		ctx: DispatchContext<UpdateEntityParams, UpdateEntityResponseResult>,
	) => Promise<UpdateEntityResponseResult>;
	QueryEntities: (ctx: DispatchContext<QueryEntitiesParams, void>) => Readable<Readable<Entity>[]>;
	SoftDeleteEntity: (
		ctx: DispatchContext<SoftDeleteEntityParams, SoftDeleteEntityResponseResult>,
	) => Promise<SoftDeleteEntityResponseResult>;
	HardDeleteEntity: (
		ctx: DispatchContext<HardDeleteEntityParams, HardDeleteEntityResponseResult>,
	) => Promise<HardDeleteEntityResponseResult>;
	Ping: (ctx: DispatchContext<PingParams, PingResponseResult>) => Promise<ApiResult<null>>;
	ToggleMainNav: (ctx: DispatchContext<ToggleMainNavParams, void>) => void;
	ToggleSecondaryNav: (ctx: DispatchContext<ToggleSecondaryNavParams, void>) => void;
	SetMobile: (ctx: DispatchContext<SetMobileParams, void>) => void;
	OpenDialog: (ctx: DispatchContext<OpenDialogParams, void>) => void;
	CloseDialog: (ctx: DispatchContext<CloseDialogParams, void>) => void;
	SelectPersona: (ctx: DispatchContext<SelectPersonaParams, void>) => void;
	SelectCommunity: (ctx: DispatchContext<SelectCommunityParams, void>) => void;
	SelectSpace: (ctx: DispatchContext<SelectSpaceParams, void>) => void;
	ViewSpace: (ctx: DispatchContext<ViewSpaceParams, void>) => void;
	CreateTie: (
		ctx: DispatchContext<CreateTieParams, CreateTieResponseResult>,
	) => Promise<CreateTieResponseResult>;
	ReadTies: (
		ctx: DispatchContext<ReadTiesParams, ReadTiesResponseResult>,
	) => Promise<ReadTiesResponseResult>;
	DeleteTie: (
		ctx: DispatchContext<DeleteTieParams, DeleteTieResponseResult>,
	) => Promise<DeleteTieResponseResult>;
}

// generated by src/lib/app/mutations.gen.ts
