import type {Gen} from '@feltcoop/gro';
import {toRootPath} from '@feltcoop/gro/dist/paths.js';

import {eventInfos} from '$lib/app/events';

const toParamsName = (name: string): string => name + 'Params';
const toResponseResultName = (name: string): string => name + 'ResponseResult';

// Outputs a file with event types that can be imported from anywhere with no runtime cost.
export const gen: Gen = async ({originId}) => {
	return `
// generated by ${toRootPath(originId)}
  
import type {Readable} from 'svelte/store';

import type {ApiResult} from '$lib/server/api';
import type {Entity} from '$lib/vocab/entity/entity';
import type {DispatchContext} from '$lib/app/dispatch';
import type {
${eventInfos.reduce(
	(str, eventInfo) =>
		str +
		`${toParamsName(eventInfo.name)}, ${
			eventInfo.type === 'ClientEvent' ? '' : toResponseResultName(eventInfo.name) + ','
		}
`.trim(),
	'',
)}
} from '$lib/app/eventTypes';

/* eslint-disable @typescript-eslint/array-type */

export interface Mutations {
  ${eventInfos.reduce(
		(str, eventInfo) =>
			str +
			`
      ${eventInfo.name}: (
        ctx: DispatchContext<${toParamsName(eventInfo.name)}, ${
				eventInfo.type === 'ClientEvent' ? 'void' : toResponseResultName(eventInfo.name)
			}>,
      ) => ${eventInfo.returns};
`.trim(),
		'',
	)}
}

// generated by ${toRootPath(originId)}
`.trim();
};
