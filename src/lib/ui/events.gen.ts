import type {Gen} from '@feltcoop/gro/dist/gen/gen.js';
import {toRootPath} from '@feltcoop/gro/dist/paths.js';

import {eventsInfo} from '$lib/vocab/event/eventsInfo';

// Outputs a file with services metadata that can be imported from the client.
export const gen: Gen = async ({originId}) => {
	// TODO we're not currently including the schemas since we don't yet use them on the client
	// import type {AnySchema} from 'ajv';
	// paramsSchema: AnySchema;
	// responseSchema: AnySchema;
	// paramsSchema: ${JSON.stringify(service.paramsSchema)},
	// responseSchema: ${JSON.stringify(service.responseSchema)},
	return `
// generated by ${toRootPath(originId)}
  
import type {Readable} from 'svelte/store';

import type {ClientAccountSession} from '$lib/session/clientSession';
import type {ApiResult} from '$lib/server/api';
import type {Community} from '$lib/vocab/community/community';
import type {Persona} from '$lib/vocab/persona/persona';
import type {Membership} from '$lib/vocab/membership/membership';
import type {Space} from '$lib/vocab/space/space';
import type {File} from '$lib/vocab/file/file';
import type {DispatchContext} from '$lib/ui/api';
import type {MainNavView} from '$lib/ui/ui';

${eventsInfo.reduce(
	(str, eventInfo) =>
		str +
		`
export type ${eventInfo.name}_params_type = ${eventInfo.params.type};
${
	eventInfo.type === 'ClientEvent'
		? ''
		: `export type ${eventInfo.name}_response_type = ${eventInfo.response.type};`
}
`,
	'',
)}

export interface EventsParams {
	${eventsInfo.reduce(
		(str, eventInfo) =>
			str +
			`
${eventInfo.name}: ${eventInfo.name}_params_type;
`.trim(),
		'',
	)}
}
export interface EventsResponse {
	${eventsInfo.reduce(
		(str, eventInfo) =>
			str +
			(eventInfo.type === 'ClientEvent'
				? ''
				: `
${eventInfo.name}: ${eventInfo.name}_response_type;
`.trim()),
		'',
	)}
}

export interface Dispatch {
	${eventsInfo.reduce(
		(str, eventInfo) =>
			str +
			`
		(
			eventName: '${eventInfo.name}',
			params: ${eventInfo.params.type},
		): ${eventInfo.returns};
`.trim(),
		'',
	)}
}

export interface UiHandlers {
  ${eventsInfo.reduce(
		(str, eventInfo) =>
			str +
			`
      ${eventInfo.name}: (
        ctx: DispatchContext<${eventInfo.params.type}, ${
				eventInfo.type === 'ClientEvent' ? 'void' : eventInfo.response.type
			}>,
      ) => ${eventInfo.returns};
`.trim(),
		'',
	)}
}

// generated by ${toRootPath(originId)}
`.trim();
};
