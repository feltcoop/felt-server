import type {Gen} from '@feltcoop/gro/dist/gen/gen.js';
import {toRootPath} from '@feltcoop/gro/dist/paths.js';

import {events as ui_events} from '$lib/ui/ui.events';
import {events as session_events} from '$lib/session/session.events';
import {events as community_events} from '$lib/vocab/community/community.events';
import {events as persona_events} from '$lib/vocab/persona/persona.events';
import {events as membership_events} from '$lib/vocab/membership/membership.events';
import {events as space_events} from '$lib/vocab/space/space.events';
import {events as file_events} from '$lib/vocab/file/file.events';
import type {EventInfo} from '$lib/vocab/event/event';

const events: EventInfo[] = session_events.concat(
	community_events,
	persona_events,
	membership_events,
	space_events,
	file_events,
	ui_events,
);

// Outputs a file with services metadata that can be imported from the client.
export const gen: Gen = async ({originId}) => {
	// TODO we're not currently including the schemas since we don't yet use them on the client
	// import type {AnySchema} from 'ajv';
	// paramsSchema: AnySchema;
	// responseSchema: AnySchema;
	// paramsSchema: ${JSON.stringify(service.paramsSchema)},
	// responseSchema: ${JSON.stringify(service.responseSchema)},
	return `
// generated by ${toRootPath(originId)}
  
import type {Readable} from 'svelte/store';

import type {ClientAccountSession} from '$lib/session/clientSession';
import type {ApiResult} from '$lib/server/api';
import type {Community} from '$lib/vocab/community/community';
import type {Persona} from '$lib/vocab/persona/persona';
import type {Membership} from '$lib/vocab/membership/membership';
import type {Space} from '$lib/vocab/space/space';
import type {File} from '$lib/vocab/file/file';
import type {DispatchContext} from '$lib/ui/api';
import type {MainNavView} from '$lib/ui/ui';

${events.reduce(
	(str, eventData) =>
		str +
		`
export type ${eventData.name}_params_type = ${eventData.params.type};
export type ${eventData.name}_response_type = ${eventData.response.type};
`,
	'',
)}

export interface EventsParams {
	${events.reduce(
		(str, eventData) =>
			str +
			`
${eventData.name}: ${eventData.name}_params_type;
`.trim(),
		'',
	)}
}
export interface EventsResponse {
	${events.reduce(
		(str, eventData) =>
			str +
			`
${eventData.name}: ${eventData.name}_response_type;
`.trim(),
		'',
	)}
}

export interface Dispatch {
	${events.reduce(
		(str, eventData) =>
			str +
			`
		(
			eventName: '${eventData.name}',
			params: ${eventData.params.type},
		): ${eventData.returns};
`.trim(),
		'',
	)}
}

export interface UiHandlers {
  ${events.reduce(
		(str, eventData) =>
			str +
			`
      ${eventData.name}: (
        ctx: DispatchContext<${eventData.params.type}, ${eventData.response.type}>,
      ) => ${eventData.returns};
`.trim(),
		'',
	)}
}

// generated by ${toRootPath(originId)}
`.trim();
};
