// generated by src/lib/ui/events.gen.ts

import type {Readable} from 'svelte/store';

import type {ClientAccountSession} from '$lib/session/clientSession';
import type {ApiResult} from '$lib/server/api';
import type {Community} from '$lib/vocab/community/community';
import type {Persona} from '$lib/vocab/persona/persona';
import type {Membership} from '$lib/vocab/membership/membership';
import type {Space} from '$lib/vocab/space/space';
import type {File} from '$lib/vocab/file/file';
import type {DispatchContext} from '$lib/ui/api';
import type {MainNavView} from '$lib/ui/ui';

export interface EventsParams {
	log_in: log_in_params_type;
	log_out: log_out_params_type;
	create_community: create_community_params_type;
	read_community: read_community_params_type;
	read_communities: read_communities_params_type;
	create_persona: create_persona_params_type;
	create_membership: create_membership_params_type;
	create_space: create_space_params_type;
	read_space: read_space_params_type;
	read_spaces: read_spaces_params_type;
	create_file: create_file_params_type;
	read_files: read_files_params_type;
	query_files: query_files_params_type;
	ping: ping_params_type;
	toggle_main_nav: toggle_main_nav_params_type;
	toggle_secondary_nav: toggle_secondary_nav_params_type;
	set_main_nav_view: set_main_nav_view_params_type;
	set_mobile: set_mobile_params_type;
	select_persona: select_persona_params_type;
	select_community: select_community_params_type;
	select_space: select_space_params_type;
}
export interface EventsResponse {
	log_in: log_in_response_type;
	log_out: log_out_response_type;
	create_community: create_community_response_type;
	read_community: read_community_response_type;
	read_communities: read_communities_response_type;
	create_persona: create_persona_response_type;
	create_membership: create_membership_response_type;
	create_space: create_space_response_type;
	read_space: read_space_response_type;
	read_spaces: read_spaces_response_type;
	create_file: create_file_response_type;
	read_files: read_files_response_type;
	ping: ping_response_type;
}

export type log_in_params_type = {
	accountName: string;
	password: string;
};
export type log_in_response_type = ApiResult<{session: ClientAccountSession}>;

export type log_out_params_type = void;
export type log_out_response_type = ApiResult<{message: string}>;

export type create_community_params_type = {
	name: string;
	persona_id: number;
};
export type create_community_response_type = ApiResult<{
	community: Community;
}>;

export type read_community_params_type = {
	community_id: number;
};
export type read_community_response_type = ApiResult<{
	community: Community;
}>;

export type read_communities_params_type = {};
export type read_communities_response_type = ApiResult<{
	communities: Community[];
}>;

export type create_persona_params_type = {name: string};
export type create_persona_response_type = ApiResult<{persona: Persona; community: Community}>;

export type create_membership_params_type = {persona_id: number; community_id: number};
export type create_membership_response_type = ApiResult<{membership: Membership}>;

export type create_space_params_type = {
	community_id: number;
	name: string;
	url: string;
	media_type: string;
	content: string;
};
export type create_space_response_type = ApiResult<{space: Space}>;

export type read_space_params_type = {
	space_id: number;
};
export type read_space_response_type = ApiResult<{space: Space}>;

export type read_spaces_params_type = {
	community_id: number;
};
export type read_spaces_response_type = ApiResult<{spaces: Space[]}>;

export type create_file_params_type = {
	actor_id: number;
	space_id: number;
	content: string;
};
export type create_file_response_type = ApiResult<{file: File}>;

export type read_files_params_type = {space_id: number};
export type read_files_response_type = ApiResult<{files: File[]}>;

export type query_files_params_type = {space_id: number};

export type ping_params_type = void;
export type ping_response_type = ApiResult<null>;

export type toggle_main_nav_params_type = void;

export type toggle_secondary_nav_params_type = void;

export type set_main_nav_view_params_type = MainNavView;

export type set_mobile_params_type = boolean;

export type select_persona_params_type = {persona_id: number};

export type select_community_params_type = {community_id: number | null};

export type select_space_params_type = {community_id: number; space_id: number};

export interface Dispatch {
	(
		eventName: 'log_in',
		params: {
			accountName: string;
			password: string;
		},
	): Promise<ApiResult<{session: ClientAccountSession}>>;
	(eventName: 'log_out', params: void): Promise<ApiResult<{message: string}>>;
	(
		eventName: 'create_community',
		params: {
			name: string;
			persona_id: number;
		},
	): Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	(
		eventName: 'read_community',
		params: {
			community_id: number;
		},
	): Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	(eventName: 'read_communities', params: {}): Promise<
		ApiResult<{
			communities: Community[];
		}>
	>;
	(eventName: 'create_persona', params: {name: string}): Promise<
		ApiResult<{persona: Persona; community: Community}>
	>;
	(eventName: 'create_membership', params: {persona_id: number; community_id: number}): Promise<
		ApiResult<{membership: Membership}>
	>;
	(
		eventName: 'create_space',
		params: {
			community_id: number;
			name: string;
			url: string;
			media_type: string;
			content: string;
		},
	): Promise<ApiResult<{space: Space}>>;
	(
		eventName: 'read_space',
		params: {
			space_id: number;
		},
	): Promise<ApiResult<{space: Space}>>;
	(
		eventName: 'read_spaces',
		params: {
			community_id: number;
		},
	): Promise<ApiResult<{spaces: Space[]}>>;
	(
		eventName: 'create_file',
		params: {
			actor_id: number;
			space_id: number;
			content: string;
		},
	): Promise<ApiResult<{file: File}>>;
	(eventName: 'read_files', params: {space_id: number}): Promise<ApiResult<{files: File[]}>>;
	(eventName: 'query_files', params: {space_id: number}): Readable<Readable<File>[]>;
	(eventName: 'ping', params: void): Promise<ApiResult<null>>;
	(eventName: 'toggle_main_nav', params: void): void;
	(eventName: 'toggle_secondary_nav', params: void): void;
	(eventName: 'set_main_nav_view', params: MainNavView): void;
	(eventName: 'set_mobile', params: boolean): void;
	(eventName: 'select_persona', params: {persona_id: number}): void;
	(eventName: 'select_community', params: {community_id: number | null}): void;
	(eventName: 'select_space', params: {community_id: number; space_id: number}): void;
}

export interface UiHandlers {
	log_in: (
		ctx: DispatchContext<
			{
				accountName: string;
				password: string;
			},
			ApiResult<{session: ClientAccountSession}>
		>,
	) => Promise<ApiResult<{session: ClientAccountSession}>>;
	log_out: (
		ctx: DispatchContext<void, ApiResult<{message: string}>>,
	) => Promise<ApiResult<{message: string}>>;
	create_community: (
		ctx: DispatchContext<
			{
				name: string;
				persona_id: number;
			},
			ApiResult<{
				community: Community;
			}>
		>,
	) => Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	read_community: (
		ctx: DispatchContext<
			{
				community_id: number;
			},
			ApiResult<{
				community: Community;
			}>
		>,
	) => Promise<
		ApiResult<{
			community: Community;
		}>
	>;
	read_communities: (
		ctx: DispatchContext<
			{},
			ApiResult<{
				communities: Community[];
			}>
		>,
	) => Promise<
		ApiResult<{
			communities: Community[];
		}>
	>;
	create_persona: (
		ctx: DispatchContext<{name: string}, ApiResult<{persona: Persona; community: Community}>>,
	) => Promise<ApiResult<{persona: Persona; community: Community}>>;
	create_membership: (
		ctx: DispatchContext<
			{persona_id: number; community_id: number},
			ApiResult<{membership: Membership}>
		>,
	) => Promise<ApiResult<{membership: Membership}>>;
	create_space: (
		ctx: DispatchContext<
			{
				community_id: number;
				name: string;
				url: string;
				media_type: string;
				content: string;
			},
			ApiResult<{space: Space}>
		>,
	) => Promise<ApiResult<{space: Space}>>;
	read_space: (
		ctx: DispatchContext<
			{
				space_id: number;
			},
			ApiResult<{space: Space}>
		>,
	) => Promise<ApiResult<{space: Space}>>;
	read_spaces: (
		ctx: DispatchContext<
			{
				community_id: number;
			},
			ApiResult<{spaces: Space[]}>
		>,
	) => Promise<ApiResult<{spaces: Space[]}>>;
	create_file: (
		ctx: DispatchContext<
			{
				actor_id: number;
				space_id: number;
				content: string;
			},
			ApiResult<{file: File}>
		>,
	) => Promise<ApiResult<{file: File}>>;
	read_files: (
		ctx: DispatchContext<{space_id: number}, ApiResult<{files: File[]}>>,
	) => Promise<ApiResult<{files: File[]}>>;
	query_files: (ctx: DispatchContext<{space_id: number}, void>) => Readable<Readable<File>[]>;
	ping: (ctx: DispatchContext<void, ApiResult<null>>) => Promise<ApiResult<null>>;
	toggle_main_nav: (ctx: DispatchContext<void, void>) => void;
	toggle_secondary_nav: (ctx: DispatchContext<void, void>) => void;
	set_main_nav_view: (ctx: DispatchContext<MainNavView, void>) => void;
	set_mobile: (ctx: DispatchContext<boolean, void>) => void;
	select_persona: (ctx: DispatchContext<{persona_id: number}, void>) => void;
	select_community: (ctx: DispatchContext<{community_id: number | null}, void>) => void;
	select_space: (ctx: DispatchContext<{community_id: number; space_id: number}, void>) => void;
}

// generated by src/lib/ui/events.gen.ts
