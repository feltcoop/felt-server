import type {Gen} from '@feltcoop/gro';
import {toRootPath} from '@feltcoop/gro/dist/paths.js';

import {services} from '$lib/server/services';

const toParamsName = (name: string): string => name + 'Params';
const toResponseName = (name: string): string => name + 'Response';
const toResponseResultName = (name: string): string => name + 'ResponseResult';

// Outputs a file with event types that can be imported from anywhere with no runtime cost.
export const gen: Gen = async ({originId}) => {
	return `
// generated by ${toRootPath(originId)}
  
import type {SvelteComponent} from 'svelte';
import type {Readable} from 'svelte/store';

import type {ApiResult} from '$lib/server/api';
import type {Community} from '$lib/vocab/community/community';
import type {Persona, AccountPersona} from '$lib/vocab/persona/persona';
import type {Membership} from '$lib/vocab/membership/membership';
import type {Space} from '$lib/vocab/space/space';
import type {Entity} from '$lib/vocab/entity/entity';
import type {Tie} from '$lib/vocab/tie/tie';
import type {EntityData} from '$lib/vocab/entity/entityData';
import type {DispatchContext} from '$lib/app/dispatch';

/* eslint-disable @typescript-eslint/no-empty-interface, @typescript-eslint/array-type */

export interface ServicesByName {
	${Array.from(services.values()).reduce((str, service) => {
		const {name} = service.event;
		return str + `${name}: Service<${toParamsName(name)}, ${toResponseResultName(name)}>;`.trim();
	}, '')}
}

// generated by ${toRootPath(originId)}
`.trim();
};

// Service<ReadSpaceParams, ReadSpaceResponseResult>
